name: "(In development - Don't Use) Publish: Release All"
run-name: Release All Modules (${{ inputs.releaseversion }} -> ${{ inputs.nextversion}})

on:
  workflow_dispatch:
    inputs:
      releaseversion:
        description: 'Release version'
        required: true
      nextversion:
        description: 'Next dev version'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      RELEASE: ${{ inputs.releaseversion }}
      NEXT: ${{ inputs.nextversion }}
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          path: main
          fetch-depth: 0

      - name: Setup Java & Maven
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'maven'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.MAVEN_GPG_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Get the artifact from the main POM
        working-directory: main
        run: |
          echo "ARTIFACT=`mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout`" >> $GITHUB_ENV

      - name: Configure git user
        run: |
          git config --global user.name ${{ github.actor }}
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create combined module
        run: |
          mkdir combined
          cp main/pom.xml combined
          sed -i '/<\/developers>/a <modules><module>pass-core</module><module>pass-support</module></modules>' combined/pom.xml

      - name: Checkout all released PASS repos
        run: |
          git clone https://${{ secrets.JAVA_RELEASE_PAT }}@github.com/eclipse-pass/pass-core.git combined/pass-core
          git clone https://${{ secrets.JAVA_RELEASE_PAT }}@github.com/eclipse-pass/pass-support.git combined/pass-support
          git clone https://${{ secrets.JAVA_RELEASE_PAT }}@github.com/eclipse-pass/pass-ui.git combined/pass-ui
          git clone https://${{ secrets.JAVA_RELEASE_PAT }}@github.com/eclipse-pass/pass-acceptance-testing.git combined/pass-acceptance-testing
          git clone https://${{ secrets.JAVA_RELEASE_PAT }}@github.com/eclipse-pass/pass-docker.git combined/pass-docker

#      - name: Setup Node & Yarn
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18
#
#      - name: Login to GHCR
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.JAVA_RELEASE_PAT }}

      - name: Check for tags
        run: |
          (cd main && echo "MAIN_TAG_EXISTS=$(git tag -l "$RELEASE")" >> $GITHUB_ENV)
          (cd combined/pass-core && echo "PASS_CORE_TAG_EXISTS=$(git tag -l "foobar")" >> $GITHUB_ENV)
          (cd combined/pass-support && echo "PASS_SUPPORT_TAG_EXISTS=$(git tag -l "$RELEASE")" >> $GITHUB_ENV)
          (cd combined/pass-ui && echo "PASS_UI_TAG_EXISTS=$(git tag -l "$RELEASE")" >> $GITHUB_ENV)
          (cd combined/pass-acceptance-testing && echo "PASS_ACCPT_TEST_TAG_EXISTS=$(git tag -l "$RELEASE")" >> $GITHUB_ENV)
          (cd combined/pass-docker && echo "PASS_DOCKER_TAG_EXISTS=$(git tag -l "$RELEASE")" >> $GITHUB_ENV)

      - name: Create aggregate tag env vars
        run: |
          echo "ALL_JAVA_REPOS_TAG_EXISTS=${{ env.MAIN_TAG_EXISTS && env.PASS_CORE_TAG_EXISTS && env.PASS_SUPPORT_TAG_EXISTS }}" >> $GITHUB_ENV

      - name: Test step
        run: |
          [[ -z $MAIN_TAG_EXISTS ]] && \
            (echo "1Printing in test step NO tag" && echo "1Second statement") || \
            echo "1Printing in test step second HAS tag"
          [[ -z $PASS_CORE_TAG_EXISTS ]] && \
            (echo "2Printing in test step NO tag" && echo "2Second statement") || \
            echo "2Printing in test step second HAS tag"

#      - name: Set ${{ env.RELEASE }}/commit/tag ~ Java Repositories
#        if: ${{ ! env.ALL_JAVA_REPOS_TAG_EXISTS }}
#        run: |
#          [[ -z $MAIN_TAG_EXISTS ]] && \
#            (cd main && mvn versions:set -B -ntp -DnewVersion=$RELEASE && git commit -am "Update version to $RELEASE" && git tag $RELEASE) || \
#            echo "main already has tag $RELEASE"
#          (cd combined && mvn versions:set -B -ntp -DnewVersion=$RELEASE)
#          [[ -z $PASS_CORE_TAG_EXISTS ]] && \
#            (cd combined/pass-core && git commit -am "Update version to $RELEASE" && git tag $RELEASE) || \
#            echo "pass-core already has tag $RELEASE"
#          [[ -z $PASS_SUPPORT_TAG_EXISTS ]] && \
#            (cd combined/pass-support && git commit -am "Update version to $RELEASE" && git tag $RELEASE) || \
#            echo "pass-support already has tag $RELEASE";

#      - name: Release Java modules
#        if: ${{ ! env.ALL_JAVA_REPOS_TAG_EXISTS }}
#        uses: ./main/.github/actions/maven-release
#        with:
#          repodir: combined
#        env:
#          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
#          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

#      - name: Push Docker images to GHCR
#        if: ${{ ! env.ALL_JAVA_REPOS_TAG_EXISTS }}
#        run: |
#          docker push ghcr.io/eclipse-pass/pass-core-main:$RELEASE
#          docker push ghcr.io/eclipse-pass/deposit-services-core:$RELEASE
#          docker push ghcr.io/eclipse-pass/pass-notification-service:$RELEASE
#          docker push ghcr.io/eclipse-pass/jhu-grant-loader:$RELEASE
#          docker push ghcr.io/eclipse-pass/pass-journal-loader:$RELEASE
#          docker push ghcr.io/eclipse-pass/pass-nihms-loader:$RELEASE
#
#      - name: Push the commits and tags
#        if: ${{ ! env.ALL_JAVA_REPOS_TAG_EXISTS }}
#        run: |
#          (cd main && git push origin && git push origin --tags)
#          (cd combined/pass-core && git push origin && git push origin --tags)
#          (cd combined/pass-support && git push origin && git push origin --tags)

#      - name: Set ${{ env.RELEASE }}/commit/tag ~ pass-ui
#        if: ${{ ! env.PASS_UI_TAG_EXISTS }}
#        uses: ./main/.github/actions/yarn-version
#        with:
#          repository_dir: combined/pass-ui
#        env:
#          RELEASE: ${{ env.RELEASE }}
#
#      - name: Build ${{ env.RELEASE }} pass-ui
#        if: ${{ ! env.PASS_UI_TAG_EXISTS }}
#        uses: ./main/.github/actions/yarn-build
#        with:
#          repository_dir: combined/pass-ui
#          env_path: ../pass-docker/.env

#      - name: Push Docker images to GHCR
#        if: ${{ ! env.PASS_UI_TAG_EXISTS }}
#        run: |
#          docker push ghcr.io/eclipse-pass/pass-ui:$RELEASE
#
#      - name: Push the commits and tags
#        if: ${{ ! env.PASS_UI_TAG_EXISTS }}
#        run: |
#          (cd combined/pass-ui && git push origin && git push origin --tags)


#      - name: Set ${{ env.RELEASE }}/commit/tag ~ pass-acceptance-testing
#        if: ${{ ! env.PASS_ACCPT_TEST_TAG_EXISTS }}
#        uses: ./main/.github/actions/yarn-version
#        with:
#          repository_dir: combined/pass-acceptance-testing
#        env:
#          RELEASE: ${{ env.RELEASE }}

#      - name: Push the commits and tags
#        if: ${{ ! env.PASS_ACCPT_TEST_TAG_EXISTS }}
#        run: |
#          (cd combined/acceptance-testing && git push origin && git push origin --tags)


#      - name: Set ${{ env.RELEASE }}/commit/tag ~ pass-docker
#        if: ${{ ! env.PASS_DOCKER_TAG_EXISTS }}
#        run: |
#          cd combined/pass-docker
#          sed -i "/^PASS_VERSION/s/.*/PASS_VERSION=$RELEASE/" .env
#          git commit -am "Update version to $RELEASE"
#          git tag --force $RELEASE
#
#      - name: Build ${{ env.RELEASE }} pass-docker images
#        if: ${{ ! env.PASS_DOCKER_TAG_EXISTS }}
#        working-directory: combined/pass-docker
#        run: docker compose -f docker-compose.yml -f eclipse-pass.local.yml build idp ldap

#      - name: Push Docker images to GHCR
#        if: ${{ ! env.PASS_DOCKER_TAG_EXISTS }}
#        run: |
#          docker push ghcr.io/eclipse-pass/demo-ldap:$RELEASE
#          docker push ghcr.io/eclipse-pass/idp:$RELEASE
#
#      - name: Push the commits and tags
#        if: ${{ ! env.PASS_DOCKER_TAG_EXISTS }}
#        run: |
#          (cd combined/pass-docker && git push origin && git push origin --tags)

# conditional if commit message is not there with message
#      - name: Set dev ${{ env.NEXT }}/commit ~ Java Repositories
#        run: |
#          (cd main && mvn versions:set -B -ntp -DallowSnapshots=true -DnewVersion=$NEXT && git commit -am "Update version to $NEXT")
#          (cd combined && mvn versions:set -B -ntp -DallowSnapshots=true -DnewVersion=$NEXT)
#          (cd combined/pass-core && git commit -am "Update version to $NEXT")
#          (cd combined/pass-support && git commit -am "Update version to $NEXT")
#
#      - name: Set dev ${{ env.NEXT }}/commit ~ pass-ui
#        uses: ./main/.github/actions/yarn-version
#        with:
#          repository_dir: combined/pass-ui
#          skip_tag: "true"
#        env:
#          RELEASE: ${{ env.NEXT }}
#
#      - name: Set dev ${{ env.NEXT }}/commit ~ pass-acceptance-testing
#        uses: ./main/.github/actions/yarn-version
#        with:
#          repository_dir: combined/pass-acceptance-testing
#          skip_tag: "true"
#        env:
#          RELEASE: ${{ env.NEXT }}
#
#      - name: Set dev ${{ env.NEXT }}/commit ~ pass-docker
#        run: |
#          cd combined/pass-docker
#          sed -i "/^PASS_VERSION/s/.*/PASS_VERSION=$NEXT/" .env
#          git commit -am "Update version to $NEXT"

#      - name: Release dev Java modules
#        working-directory: combined
#        run: |
#          mvn -B -V -ntp -P release clean deploy -DskipTests -DskipITs
#        env:
#          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
#          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

#      - name: Build ${{ env.NEXT }} pass-ui
#        uses: ./main/.github/actions/yarn-build
#        with:
#          repository_dir: combined/pass-ui
#          env_path: ../pass-docker/.env
#          is_dev: "true"
#
#      - name: Build ${{ env.NEXT }} pass-docker images
#        working-directory: combined/pass-docker
#        run: docker compose -f docker-compose.yml -f eclipse-pass.local.yml build idp ldap



#      - name: Push Docker images to GHCR
#        run: |
#          docker push ghcr.io/eclipse-pass/pass-core-main:$RELEASE
#          docker push ghcr.io/eclipse-pass/pass-core-main:$NEXT
#          docker push ghcr.io/eclipse-pass/deposit-services-core:$RELEASE
#          docker push ghcr.io/eclipse-pass/deposit-services-core:$NEXT
#          docker push ghcr.io/eclipse-pass/pass-notification-service:$RELEASE
#          docker push ghcr.io/eclipse-pass/pass-notification-service:$NEXT
#          docker push ghcr.io/eclipse-pass/jhu-grant-loader:$RELEASE
#          docker push ghcr.io/eclipse-pass/jhu-grant-loader:$NEXT
#          docker push ghcr.io/eclipse-pass/pass-journal-loader:$RELEASE
#          docker push ghcr.io/eclipse-pass/pass-journal-loader:$NEXT
#          docker push ghcr.io/eclipse-pass/pass-nihms-loader:$RELEASE
#          docker push ghcr.io/eclipse-pass/pass-nihms-loader:$NEXT
#          docker push ghcr.io/eclipse-pass/pass-ui:$RELEASE
#          docker push ghcr.io/eclipse-pass/pass-ui:$NEXT
#          docker push ghcr.io/eclipse-pass/demo-ldap:$RELEASE
#          docker push ghcr.io/eclipse-pass/demo-ldap:$NEXT
#          docker push ghcr.io/eclipse-pass/idp:$RELEASE
#          docker push ghcr.io/eclipse-pass/idp:$NEXT
#
#      - name: Push the commits and tags
#        run: |
#          (cd main && git push origin && git push origin --tags --force)
#          (cd combined/pass-core && git push origin && git push origin --tags --force)
#          (cd combined/pass-support && git push origin && git push origin --tags --force)
#          (cd combined/pass-ui && git push origin && git push origin --tags --force)
#          (cd combined/pass-acceptance-testing && git push origin && git push origin --tags --force)
#          (cd combined/pass-docker && git push origin && git push origin --tags --force)
#
#      - name: Create GitHub main release
#        run: |
#          gh release delete "$RELEASE" --repo=eclipse-pass/main
#          gh release create "$RELEASE" --repo=eclipse-pass/main --generate-notes
#          gh release delete "$RELEASE" --repo=eclipse-pass/pass-core
#          gh release create "$RELEASE" --repo=eclipse-pass/pass-core --generate-notes
#          gh release delete "$RELEASE" --repo=eclipse-pass/pass-support
#          gh release create "$RELEASE" --repo=eclipse-pass/pass-support --generate-notes
#          gh release delete "$RELEASE" --repo=eclipse-pass/pass-ui
#          gh release create "$RELEASE" --repo=eclipse-pass/pass-ui --generate-notes
#          gh release delete "$RELEASE" --repo=eclipse-pass/pass-acceptance-testing
#          gh release create "$RELEASE" --repo=eclipse-pass/pass-acceptance-testing --generate-notes
#          gh release delete "$RELEASE" --repo=eclipse-pass/pass-docker
#          gh release create "$RELEASE" --repo=eclipse-pass/pass-docker --generate-notes
#        env:
#          GITHUB_TOKEN: ${{ secrets.JAVA_RELEASE_PAT }}
